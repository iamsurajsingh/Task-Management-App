{"version":3,"sources":["App.js","index.js"],"names":["App","onPageLoad","item","map","elem","console","log","checkBoxElement","document","getElementById","id","checkBoxUnit","getElementsByTagName","taskContain","head","dateContain","date","status","setAttribute","useState","heading","setHeading","localData","localStorage","getItem","JSON","parse","getLocalStorage","items","setItems","desc","setDesc","setStatus","editHeading","setEditHeading","setEditDesc","toggleButton","setToggleButton","getfilterData","setFilterData","getStatusHeading","setStatusHeading","addNewTask","inputArea","noteArea","value","currElem","description","inputData","Date","getTime","toString","toLocaleString","year","month","day","hour","minute","second","hour12","alert","filterData","taskStatus","showFilteredList","filter","useEffect","setItem","stringify","className","onClick","type","removeAttribute","handleValidation","for","taskToEdit","find","editTasks","updatedTasks","deleteTasks","onChange","event","target","placeholder","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9da19757.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './App.scss';\n\nfunction App() {\n\n  const getLocalStorage = () => {\n    const localData = localStorage.getItem('myTasks');\n    if (localData) {\n      return JSON.parse(localData);\n    }\n    else {\n      return [];\n    }\n  }\n\n  function onPageLoad(item) {\n    item.map((elem) => {\n      console.log(elem);\n      const checkBoxElement = document.getElementById(elem.id);\n      const checkBoxUnit  = document.getElementsByTagName('label');\n      console.log(checkBoxUnit);\n      const taskContain = document.getElementById(elem.head);\n      // console.log(taskContain);\n      const dateContain = document.getElementById(elem.date);\n      // console.log(checkBoxElement);\n\n      if (elem.status === \"Completed\") {\n        checkBoxElement.setAttribute(\"checked\", \"\");\n        checkBoxElement.setAttribute(\"style\", \"color: aqua\");\n        taskContain.setAttribute(\"style\", \"text-decoration: line-through; color: #9E9E9E;\");\n        dateContain.setAttribute(\"style\", \"text-decoration: line-through; color: #9E9E9E;\");\n        \n      }\n      \n    })\n\n  }\n\n  const [heading, setHeading] = useState(\"\");\n  const [items, setItems] = useState(getLocalStorage());\n  const [desc, setDesc] = useState(\"\");\n  const [status, setStatus] = useState(\"Pending\");\n  const [editHeading, setEditHeading] = useState(\"\");\n  const [editDesc, setEditDesc] = useState(\"\");\n  const [toggleButton, setToggleButton] = useState(false);\n  const [getfilterData, setFilterData] = useState(items);\n  const [getStatusHeading, setStatusHeading] = useState(\"All Tasks\");\n\n\n\n\n  const addNewTask = () => {\n\n    const inputArea = document.getElementById('headingTodo');\n    const noteArea = document.getElementById('descriptionTodo');\n    inputArea.value = \"\";\n    noteArea.value = \"\";\n\n\n    if (!heading) {\n      alert(\"Task Name cannot be empty\");\n    }\n\n    else if (heading && toggleButton) {\n      setItems(items.map((currElem) => {\n        if (currElem.id === editHeading) {\n          return { ...currElem, head: heading, description: desc };\n        }\n        return currElem;\n      }));\n      setStatusHeading(\"All Tasks\");\n      setHeading(\"\");\n      setDesc(\"\");\n      setToggleButton(false);\n    }\n\n    else {\n      const inputData = {\n        id: new Date().getTime().toString(),\n        head: heading,\n        description: desc,\n        date: new Date().toLocaleString('en-US', { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true }),\n        status: status,\n      }\n      setItems([...items, inputData]);\n      setFilterData([...getfilterData, inputData]);\n      setHeading(\"\");\n      setDesc(\"\");\n      setToggleButton(false);\n      console.log(inputData);\n\n    }\n  }\n\n  const deleteTasks = (id) => {\n    const updatedTasks = items.filter((elem) => {\n      return elem.id !== id;\n    });\n    setItems(updatedTasks);\n    setFilterData(updatedTasks);\n    setStatusHeading(\"All Tasks\");\n\n  }\n\n\n  const filterData = (taskStatus) => {\n    // setStatus(taskStatus);\n    if(taskStatus === \"All Tasks\") {\n      setFilterData(items);\n      setStatusHeading(\"All Tasks\");\n    }\n    else {\n      const showFilteredList = items.filter((elem) => {\n        return elem.status === taskStatus;\n      });\n      console.log(showFilteredList);\n      \n      setFilterData(showFilteredList);\n      setStatusHeading(taskStatus);\n    }\n  }\n\n\n\n\n  //  putting up data to local storage\n  useEffect(() => {\n    localStorage.setItem('myTasks', JSON.stringify(items));\n    onPageLoad(items);\n  }, [items]);\n\n\n  useEffect(() => {\n    onPageLoad(getfilterData);\n  }, [getStatusHeading]);\n\n\n  //edit the tasks\n\n  const editTasks = (id) => {\n    // const noteArea = document.getElementById('descriptionTodo');\n\n    const taskToEdit = items.find((elem) => {\n      return (elem.id === id);\n    });\n    setHeading(taskToEdit.head);\n    setDesc(taskToEdit.description)\n    setEditDesc(id);\n    setEditHeading(id);\n    setToggleButton(true);\n\n  }\n\n  const checkMouseAction = (event) => {\n    var ignoreClickOnMeElement = document.getElementById('saveChanges');\n    var isClickInsideElement = ignoreClickOnMeElement.contains(event.target); \n    if(!isClickInsideElement) {\n      alert('Please save changes first');\n    }\n  }\n\n\n\n  function handleValidation(currElem) {\n\n    const checkBoxElement = document.getElementById(currElem.id);\n    const taskContain = document.getElementById(currElem.head);\n    const dateContain = document.getElementById(currElem.date);\n    console.log(checkBoxElement);\n    \n    if (currElem.status === \"Completed\") {\n      checkBoxElement.removeAttribute(\"checked\");\n      setStatus(currElem.status);\n      taskContain.removeAttribute(\"style\", \"text-decoration: line-through; color: #9E9E9E; \");\n      dateContain.removeAttribute(\"style\", \"text-decoration: line-through; color: #9E9E9E;\");\n      setItems(items.map((elem) => {\n        if (elem.id === currElem.id) {\n          return { ...elem, status: \"Pending\" };\n        }\n        return elem;\n      }));\n\n    }\n    else {\n      \n      checkBoxElement.setAttribute(\"checked\", \"\");\n      setStatus(currElem.status);\n      taskContain.setAttribute(\"style\", \"text-decoration: line-through; color: #9E9E9E;\");\n      dateContain.setAttribute(\"style\", \"text-decoration: line-through; color: #9E9E9E;\");\n      setItems(items.map((elem) => {\n        if (elem.id === currElem.id) {\n          return { ...elem, status: \"Completed\" };\n        }\n        return elem;\n      }));\n      console.log(items);\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"navBar\">\n        <div className=\"leftMenu\">\n          <p className=\"logo\">TASK MANAGEMENT APP</p>\n        </div>\n        <div className=\"rightMenu\"></div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"leftContainer\">\n          <ul id=\"status\">\n            <span className=\"list1\" onClick={() => filterData(\"All Tasks\")}>\n              <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i><li className=\"status_name\" value=\"All Tasks\">ALL TASKS</li>\n            </span>\n            <span className=\"list2\" onClick={() => filterData(\"Completed\")}>\n              <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i><li className=\"status_name\" value=\"Completed\" >COMPLETED</li>\n            </span>\n            <span className=\"list3\" onClick={() => filterData(\"Pending\")}>\n              <i className=\"fa fa-caret-right\" aria-hidden=\"true\"></i><li className=\"status_name\" value=\"Pending\" >PENDING</li>\n            </span>\n          </ul>\n        </div>\n        <div className=\"middleContainer\">\n          <div className=\"status-name\">\n            <p className=\"middleStatus\">{getStatusHeading}</p>\n          </div>\n\n          <div className=\"tasks\">\n          {console.log(getfilterData)}\n            {getfilterData.map((currElem) => {\n              return (\n                  \n                <>\n                {console.log(currElem)}\n                  <div className=\"task-list\" key={currElem.id}>\n                    <div className=\"checkBoxDiv\">\n                      <div className=\"group\">\n                        <input type=\"checkbox\" id={currElem.id} onClick={() => handleValidation(currElem)} />\n                        <label for={currElem.id}></label>\n                      </div>\n                    </div>\n                    <div className=\"taskDetailsDiv\">\n                      <p id={currElem.head} className=\"statusHeading\" onClick={() => editTasks(currElem.id)}> {currElem.head}</p>\n                      <p id={currElem.date} className=\"taskDate\" >{currElem.date}</p>\n                    </div>\n                    <div className=\"deleteDiv\">\n                      <i className=\"fas fa-trash-alt\" onClick={() => deleteTasks(currElem.id)}></i>\n                    </div>\n                  </div>\n\n                </>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"rightContainer\">\n          <div className=\"todoHeading\">\n            {toggleButton ?\n              <input type=\"text\" id=\"headingTodo\" value={heading} onChange={(event) => {\n                setHeading(event.target.value);\n              }} /> :\n              <input type=\"text\" id=\"headingTodo\" placeholder=\"Create New Task\" onChange={(event) => {\n                setHeading(event.target.value);\n              }} />}\n\n          </div>\n\n          <div className=\"todoDescription\">\n            {toggleButton ? <input type=\"text\" id=\"descriptionTodo\" value={desc} onChange={(event) => {\n              setDesc(event.target.value);\n            }} /> :\n              <input type=\"text\" id=\"descriptionTodo\" placeholder=\"Enter note here...\" onChange={(event) => {\n                setDesc(event.target.value);\n              }} />}\n\n          </div>\n\n          {toggleButton ?\n            <button className=\"addTask\" onClick={addNewTask}> Save Changes</button> :\n            <button className=\"addTask\" onClick={addNewTask}> Add New Task</button>\n          }\n\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}